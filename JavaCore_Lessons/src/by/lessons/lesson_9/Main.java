package by.lessons.lesson_9;

public class Main {

    //1.	Класс Деревня. Деревня будет состоять из построек. К постройкам относятся промышленные здания и гражданские. К промышленным зданиям будут относится заводы и фермы. К гражданским будут относится: административные здания, жилые здания.
    //1.1 Создать класс Постройка (Building). Поля у класса Постройка: улица, материал стен, год постройки.
    //1.2 Создать класс Гражданские здания (CivilBuilding). Гражданские здания должны наследоваться от класса Постройка. Поля у класса Гражданские здания: назначение (жилье или общественные здания), количество этажей.
    //1.3 Создать класс Промышленном здание (IndustrialBuilding). Промышленные здания наследуются от Постройки. Поля которые можно определить в Промышленном здании: отрасль (Отрасль в которой здание задействовано (машиностроительная, легкая промышленность, целлюлозная промышленность, сельское хозяйство)
    //1.4 Создать класс Административном здание. Административное здание должно наследоваться от Гражданского здания. Поля, которые можно определить в Административном здании: назначение административного здания (офисное, кинотеатр, спортсооружение),число людей, на которое рассчитано здание.
    //1.5 Создать класс Многоквартирный жилой дом. Вопрос: От какого класса должен наследоваться Многоквартирный жилой дом. Поля, которые можно определить в Многоквартирном жилье: количество квартир.
    //1.6 Создать класс фабрика. Вопрос: От какого класса должна наследоваться Фабрика. Поля, которые можно определить в Фабрике: количество работников, выпускаемая продукция (запчасти, полиэтилен и т.д.)

    //Все поля должны быть с модификатором доступа private. Реализовывать методы getter и setter по необходимости. Инициализацию объекта производить через конструктор.
    //2.1  Создать спортсооружение, исполком, 2 жилых дома, 2 фабрики Значения придумать самим. Добавить эти объекты в деревню (реализовать метод по добавлению постройки в деревню) (должны придумать,как это сделать)
    //2.2 Реализовать метод по выводу информации о каждой постройке.
    //2.3 Реализовать метод по подсчету общего количества зданий в деревне.
    //2.4 Посчитать количество промышленных зданий в деревне. И вывести информацию о этих зданиях.
    //Вы
    //18:45
    //Задача №2
    //1.	Создать класс Student.
    //1.1	Определить поля в классе Student: возраст (тип int), идентификационный номер (тип long), успеваемость (тип short), имя (тип String), фамилия (тип String). Создать конструктор со всеми параметрами класса. Создать конструктор без параметров.
    //1.2	В классе Main создать 3-ёх студентов. При этом значение полей у двух студентов должны быть одинаковыми.
    //1.3	Выполнить сравнение студентов вызвав метод equals и вывести результаты в консоль.
    //1.4	Вызвать метод toString(). Результат вызова метода вывести в консоль.
    //1.5	Вызвать метод hashCode().
    //1.6	Переопределить без генерации методы equals(), hashcode(), toString()
    //1.7	Повторить пункты 1.3, 1.4. Сравнить результаты.

    public static void main(String[] args) {
        AdminBuilding gym24 = new AdminBuilding("Пушкина", "Кирпич", 2024, "Спорт", 2, 200);
        AdminBuilding administration = new AdminBuilding("Советская", "Бетон", 2000, "Управление", 3, 95);
        MultiBuilding house12 = new MultiBuilding("Пушкина", "Кирпич", 2024, "жилой", 9, 265);
        MultiBuilding house11 = new MultiBuilding("Пушкина", "Кирпич", 2023, "жилой", 8, 165);
        FactoryBuilding factory1 = new FactoryBuilding("Пушкина", "Бетон", 2000,"Конфетная", 152, "Конфеты" );
        FactoryBuilding factory2 = new FactoryBuilding("Пушкина", "Бетон", 2000, "Желатиновая", 85, "Желатинки");

        Village pupkovo = new Village();
        pupkovo.addBuilding(gym24);
        pupkovo.addBuilding(administration);
        pupkovo.addBuilding(house12);
        pupkovo.addBuilding(house11);
        pupkovo.addBuilding(factory1);
        pupkovo.addBuilding(factory2);

        System.out.println(pupkovo.toString());
        System.out.println(pupkovo.getNumbersOfBuildings());







    }
}
